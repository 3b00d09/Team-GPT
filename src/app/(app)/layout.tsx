// Opt out of caching for all data requests in the route segment
export const dynamic = "force-dynamic";
export const maxDuration = 60;

import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "../../app/globals.css";
import Conversations from "@/lib/components/conversations";
import "@fortawesome/fontawesome-svg-core/styles.css";

import { lucia, validateRequest } from "@/lib/auth/auth";
import { redirect } from "next/navigation";
import { cookies } from "next/headers";
import { AuthForm, type ActionResult } from "@/lib/components/AuthForm";
import { Toaster } from "@/components/ui/toaster";
import { dbClient } from "@/lib/db/db";
import { conversationsTable } from "@/lib/db/schema";
import { desc, eq } from "drizzle-orm";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Team GPT",
  description: "Generated by create next app",
};
//export const maxDuration = 30;

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const { user } = await validateRequest();
  if (!user) {
    return redirect("/login");
  }

  const conversations = await dbClient.select().from(conversationsTable).orderBy(desc(conversationsTable.createdAt)).where(eq(conversationsTable.userId, user.id));

  return (
    <html lang="en">
      <body className={inter.className}>
        <main className="flex w-screen h-screen overflow-hidden text-white">
          <Conversations conversations={conversations} />
          <div className="flex-1 bg-[#212121] p-4 flex flex-col relative">
            <div className="flex items-center justify-between">
              Welcome {user.username}
              <AuthForm action={logout}>
                <button>Sign out</button>
              </AuthForm>
            </div>
            {children}
          </div>
        </main>
        <Toaster />
      </body>
    </html>
  );
}

async function logout(): Promise<ActionResult> {
  "use server";
  const { session } = await validateRequest();
  if (!session) {
    return {
      error: "Unauthorized",
    };
  }

  await lucia.invalidateSession(session.id);

  const sessionCookie = lucia.createBlankSessionCookie();
  cookies().set(
    sessionCookie.name,
    sessionCookie.value,
    sessionCookie.attributes
  );
  return redirect("/login");
}
